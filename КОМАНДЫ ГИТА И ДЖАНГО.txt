ВИРТУАЛЬНАЯ СРЕДА
1) установка виртуальной среды = pip install virtualenv
2) создание изолированной среды окружения = virtualenv my_env
3) перейти в папку my_env и активировать среду виртуального окружения = Scripts\activate
При работе в консоли появится имя активированного виртуального окружения в скобках:
(my_env) laptop:~ zenx$
УСТАНОВКА ДЖАНГО
1) pip install Django
2) создать сайт = django-admin startproject mysite
3) перейти в директорию my site и запустить сайт = python manage.py runserver
4) http://localhost:8000/ перейти по ссылке
ЗАЛИТЬ НА ГИТ
1) создать репозиторий на гите, зайти в папку на компе с проектом
и в пустом месте ПКМ git bash here
2) в консольном окне git init чтоб создать репозиторий
3) "git add ." чтоб добавить все файлы с папки в репозиторий / либо
"git add ... ... ..." где ... названия файлов
4) "git commit - m "First Commit"" присвоение наименования папке в гите где ... название
5) "git remote add origin ..." где ... ссылка на репозиторий с гита пример(https://github.com/StasyanMikroLyuks/mobile-programming.git)
вместо origin может быть любое название вашего репозитория которую вы хотите использовать потом при отправке. не обязательно = названию ветки в репозитории.
7) (ТОЛЬКО В СЛУЧАЕ ОШИБКИ) "git pull origin master --allow-unrelated-histories" позволяет скачать файл с сервера гита на локальный комп 
если после этого ошибка "please commit your changes before your merge" то нужно ввести
git commit -m "..." где ... любое слово
7) "git push -f origin master" отправка проекта на гитхаб 
-u ключ при 7 пункте
origin название репозитория которое вы придумали
master название ветки может быть другое
git reset - сброс
git branch - проверка на какой сейчас ветке находишься
git branch -D - удаление ветки
git checkout название - переход на другую ветку
git checkout -b - создание новой ветки
git add . и git commit - ПОСТОЯННО ПОСЛЕ КАЖДОГО ИЗМЕНЕНИЯ В ПАПКЕ ПО ОЧЕРЕДИ.



ШАБЛОН КОДА ДЕЛАЕТСЯ В BASE.HTML
ДЛЯ ТОГО ЧТОБ ИМПОРТИРОВАТЬ ШАБЛОН В ДРУГОМ ХТМЛ-ДОКЕ надо сделать 
{%extends base.html%}
ЧТОБ СДЕЛАТЬ ИЗМЕНЕНИЯ В BASE HTML УКАЗАВ ДРУГОЙ HTML ДОК надо в 
ХТМЛ ДОКЕ ВВЕСТИ {%block ...%} какой-то хтмл код {%endblock}где ... название блока
А В HTML ШАБЛОНЕ ПРОСТО УКАЗАТЬ {%block ...%}{%endblock} без кода внутри между скобок



для доступа к гиперссылка указывается в теге href="{%url '...'%}" где ... название 
def в views.py 
например url services ссылается на def services в views.py, def service пишется функция какую хтмл страницу надо открыть
в urls.py надо прописать path('services',views.services, name='services')
